{
    "project": {},
    "files": {
        "src\\js\\comment.js": {
            "name": "src\\js\\comment.js",
            "modules": {
                "comment.js": 1
            },
            "classes": {
                "comment.js_anonymous": 1,
                "Comment": 1
            },
            "fors": {
                "Comment": 1,
                "Global": 1
            },
            "namespaces": {}
        },
        "src\\js\\data.js": {
            "name": "src\\js\\data.js",
            "modules": {
                "data.js": 1
            },
            "classes": {
                "Data": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\helpInfo.js": {
            "name": "src\\js\\helpInfo.js",
            "modules": {},
            "classes": {
                "helpInfo.js_anonymous": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\io.js": {
            "name": "src\\js\\io.js",
            "modules": {
                "io.js": 1
            },
            "classes": {
                "io.js_anonymous": 1,
                "IO": 1
            },
            "fors": {
                "IO": 1,
                "Global": 1
            },
            "namespaces": {}
        },
        "src\\js\\markus.js": {
            "name": "src\\js\\markus.js",
            "modules": {
                "markus.js": 1
            },
            "classes": {
                "Global": 1,
                "JQuery": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\navbar.js": {
            "name": "src\\js\\navbar.js",
            "modules": {
                "navbar.js": 1
            },
            "classes": {
                "navbar.js_anonymous": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\webDictionary.js": {
            "name": "src\\js\\webDictionary.js",
            "modules": {
                "webDictionary.js": 1
            },
            "classes": {
                "webDictionary.js_anonymous": 1,
                "WebDictionary": 1
            },
            "fors": {
                "webDictionary.js_anonymous": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "comment.js": {
            "name": "comment.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "comment.js_anonymous": 1,
                "Comment": 1
            },
            "fors": {
                "Comment": 1,
                "Global": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\comment.js",
            "line": 206,
            "description": "Comment.js base file."
        },
        "data.js": {
            "name": "data.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "Data": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\data.js",
            "line": 6,
            "description": "data.js base file."
        },
        "navbar.js": {
            "name": "navbar.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "helpInfo.js_anonymous": 1,
                "navbar.js_anonymous": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\navbar.js",
            "line": 6,
            "description": "navbar.js base file."
        },
        "io.js": {
            "name": "io.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "io.js_anonymous": 1,
                "IO": 1
            },
            "fors": {
                "IO": 1,
                "Global": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\io.js",
            "line": 594,
            "description": "io.js base file."
        },
        "markus.js": {
            "name": "markus.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "Global": 1,
                "JQuery": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\markus.js",
            "line": 20,
            "description": "Markus.js base file"
        },
        "webDictionary.js": {
            "name": "webDictionary.js",
            "submodules": {},
            "elements": {},
            "classes": {
                "webDictionary.js_anonymous": 1,
                "WebDictionary": 1
            },
            "fors": {
                "webDictionary.js_anonymous": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\webDictionary.js",
            "line": 61,
            "description": "webDictionary.js file. This file contains the webDictionary definitions"
        }
    },
    "classes": {
        "comment.js_anonymous": {
            "name": "comment.js_anonymous",
            "shortname": "comment.js_anonymous",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comment.js",
            "namespace": "",
            "file": "src\\js\\comment.js",
            "line": 6,
            "description": "The class that holds the variables and functions created in the namespace of this file.\nThe constrcutor of this object is only called once, because it is an anonymous function.\n\nThe functions defined in this class are later added to the MARKUS global object and can\nfrom that point on be called as `markus.comments.FUNCTION_NAME`",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_m",
                    "description": "a reference to the Markus Configuration Object is passed",
                    "type": "Object"
                }
            ]
        },
        "Comment": {
            "name": "Comment",
            "shortname": "Comment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comment.js",
            "namespace": "",
            "file": "src\\js\\comment.js",
            "line": 206,
            "description": "This class' method are defined in the above anonymous class of this file and\nare only reassigned here.\n\nMake all the functions that have been defined above availabe through\nmarkus.comment.FUNCTION, to allow calling of them throughout the DOM"
        },
        "Global": {
            "name": "Global",
            "shortname": "Global",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "markus.js",
            "namespace": "",
            "file": "src\\js\\markus.js",
            "line": 5,
            "description": "The global namespace. This is the Global namespace in **all** the files"
        },
        "Data": {
            "name": "Data",
            "shortname": "Data",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data.js",
            "namespace": "",
            "file": "src\\js\\data.js",
            "line": 6,
            "description": "Here the Markus.Data methods are defined and added to the Global Markus Singleton.\nThe Data methods handle mostly data conversion",
            "is_constructor": 1
        },
        "helpInfo.js_anonymous": {
            "name": "helpInfo.js_anonymous",
            "shortname": "helpInfo.js_anonymous",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "navbar.js",
            "namespace": "",
            "file": "src\\js\\helpInfo.js",
            "line": 7,
            "description": "The class that holds the variables and functions created in the namespace of this file.\nThe constrcutor of this object is only called once, because it is an anonymous function.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_m",
                    "description": "a reference to the Markus Configuration Object is passed",
                    "type": "Object"
                }
            ]
        },
        "io.js_anonymous": {
            "name": "io.js_anonymous",
            "shortname": "io.js_anonymous",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io.js",
            "namespace": "",
            "file": "src\\js\\io.js",
            "line": 6,
            "description": "The class that holds the variables and functions created in the namespace of this file.\nThe constrcutor of this object is only called once, because it is an anonymous function.\n\nThe functions defined in this class are later added to the MARKUS global object and can\nfrom that point on be called as `markus.io.FUNCTION_NAME`",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_m",
                    "description": "a reference to the Markus Configuration Object is passed",
                    "type": "Object"
                }
            ]
        },
        "IO": {
            "name": "IO",
            "shortname": "IO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io.js",
            "namespace": "",
            "file": "src\\js\\io.js",
            "line": 594,
            "description": "Defines the `markus.io` object that can be accessed globally. Uses some functions that have\nbeen defined in the io.js anonymous namespace, but also defines some functions in the object\ncreation itself.",
            "is_constructor": 1
        },
        "JQuery": {
            "name": "JQuery",
            "shortname": "JQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "markus.js",
            "namespace": "",
            "file": "src\\js\\markus.js",
            "line": 20,
            "description": "Some JQuery extensions"
        },
        "navbar.js_anonymous": {
            "name": "navbar.js_anonymous",
            "shortname": "navbar.js_anonymous",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "navbar.js",
            "namespace": "",
            "file": "src\\js\\navbar.js",
            "line": 6,
            "description": "The class that holds the variables and functions created in the namespace of this file.\nThe constrcutor of this object is only called once, because it is an anonymous function.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_m",
                    "description": "a reference to the Markus Configuration Object is passed",
                    "type": "Object"
                }
            ]
        },
        "webDictionary.js_anonymous": {
            "name": "webDictionary.js_anonymous",
            "shortname": "webDictionary.js_anonymous",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "webDictionary.js",
            "namespace": "",
            "file": "src\\js\\webDictionary.js",
            "line": 6,
            "description": "The class that holds the variables and functions created in the namespace of this file.\nThe constrcutor of this object is only called once, because it is an anonymous function",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_m",
                    "description": "a reference to the Markus Configuration Object is passed",
                    "type": "Object"
                }
            ]
        },
        "WebDictionary": {
            "name": "WebDictionary",
            "shortname": "WebDictionary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "webDictionary.js",
            "namespace": "",
            "file": "src\\js\\webDictionary.js",
            "line": 61,
            "description": "Web dictionary module handles the interaction between tab, input, spinner and iframe interactions.\n    It does basic iframe URL construction from input value."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\js\\comment.js",
            "line": 19,
            "description": "Finds all comments for this element, stores their text contents into an array,\nand sets this array as value atribute (after Unicode Escaping) for the `span`\ncomment Container. Finally it triggers a click event on the commentIcon span",
            "itemtype": "method",
            "name": "saveComment",
            "class": "Comment",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 59,
            "description": "Handles the removing of a comment. It first removes the comment, and then\nresaves all the ones that are still left.",
            "itemtype": "method",
            "name": "removeAnySync",
            "params": [
                {
                    "name": "event",
                    "description": "The event Object that is passed",
                    "type": "Event"
                }
            ],
            "class": "Comment",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 96,
            "description": "Enables the editing of the provided comment. It starts the editing of it\nby setting the panel-body to contenteditable and chaning the edit to a save\nbutton.",
            "itemtype": "method",
            "name": "edit",
            "params": [
                {
                    "name": "event",
                    "description": "the propagated event from the DOM",
                    "type": "Event"
                }
            ],
            "class": "Comment",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 117,
            "description": "Saves the current commentField. It escape Unicode Characters",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "event",
                    "description": "The event that is passed from the DOM",
                    "type": "Event"
                }
            ],
            "class": "Comment",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 150,
            "description": "Called upon parsing of the document to parse the comment UI from the data in the html\ndocument. This goes through all the comments and sanitizes them.",
            "itemtype": "method",
            "name": "startAddingCommentHolder",
            "class": "Comment",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 224,
            "description": "Adds all the UI Event handles for the Comment UI. This class links the UI to\nthe functions behind the scenes.",
            "itemtype": "method",
            "name": "registerCommentUI",
            "class": "Global",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\comment.js",
            "line": 243,
            "description": "Defines what happens when you click the commentIcon. It generates a new commentHolder",
            "itemtype": "method",
            "name": "registerCommentIcon",
            "class": "Global",
            "module": "comment.js"
        },
        {
            "file": "src\\js\\data.js",
            "line": 15,
            "description": "Returns an array that, depending on the provided parameters will return the\nmarkups in the passage or in the whole document. And depending on the Boolean flag\nwithSupportText it returns its surrounding text.",
            "itemtype": "method",
            "name": "getMarkupsArray",
            "params": [
                {
                    "name": "withPassage",
                    "description": "Do we want to include the passage",
                    "type": "Boolean"
                },
                {
                    "name": "withSupportText",
                    "description": "Do we want to include support Text",
                    "type": "Boolean"
                },
                {
                    "name": "noOfChars",
                    "description": "The number of chars to get",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "An Array of markups",
                "type": "Array"
            },
            "class": "Data",
            "module": "data.js"
        },
        {
            "file": "src\\js\\data.js",
            "line": 149,
            "description": "Turns an array of objects into a CSV array.",
            "itemtype": "method",
            "name": "objArrayToCSV",
            "params": [
                {
                    "name": "objArray",
                    "description": "the array to turn into a CSV",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The CSV data string",
                "type": "String"
            },
            "class": "Data",
            "module": "data.js"
        },
        {
            "file": "src\\js\\data.js",
            "line": 192,
            "description": "Turns an array of objects into a TSV array.",
            "itemtype": "method",
            "name": "objArrayToTSV",
            "params": [
                {
                    "name": "objArray",
                    "description": "the array to turn into a TSV",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The TSV data string",
                "type": "String"
            },
            "class": "Data",
            "module": "data.js"
        },
        {
            "file": "src\\js\\data.js",
            "line": 228,
            "description": "Returns the provided array as a HTML table.",
            "itemtype": "method",
            "name": "objArrayToHTML",
            "params": [
                {
                    "name": "objArray",
                    "description": "the array of objects we want to convert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the table of the array",
                "type": "String"
            },
            "class": "Data",
            "module": "data.js"
        },
        {
            "file": "src\\js\\helpInfo.js",
            "line": 20,
            "description": "In this method we load the specific help template according to the language\ncookie.",
            "itemtype": "method",
            "name": "loadHelpInfo",
            "class": "helpInfo.js_anonymous",
            "module": "navbar.js"
        },
        {
            "file": "src\\js\\helpInfo.js",
            "line": 36,
            "description": "Registers the eventHandlers for the help menu.",
            "itemtype": "method",
            "name": "registHelp",
            "class": "helpInfo.js_anonymous",
            "module": "navbar.js"
        },
        {
            "file": "src\\js\\helpInfo.js",
            "line": 74,
            "description": "Defines what happens when you click the sampleMarkup. Basically, creates contents\nand shows/hides things depending on what you clicked.",
            "itemtype": "method",
            "name": "sampleMarkupClicked",
            "params": [
                {
                    "name": "event",
                    "description": "the event that is passed from the DOM (i.e. the mouse click)",
                    "type": "Event"
                }
            ],
            "class": "helpInfo.js_anonymous",
            "module": "navbar.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 18,
            "description": "Creates an error Handler function. This function prints out the error message\nprefaced by 'Error', to make it easier to spot in the console log.",
            "itemtype": "method",
            "name": "ERROR_HANDLER",
            "params": [
                {
                    "name": "e",
                    "description": "The error that has happened",
                    "type": "Error"
                }
            ],
            "class": "io.js_anonymous",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 29,
            "description": "Updates the color switchers for the tagNames. This is called on load. It\nhides or shows buttons depending on their visibility and changes the color-switcher-class\nbased on their status\n\nThis method is defined in the io.js anonymous function but later attached to the `markus.io` object",
            "itemtype": "method",
            "name": "updateSwitchers",
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 74,
            "description": "Updates the .singleTagContent in the manualPopover. It handles their visibility\nbased on the 'visible' property and sets the button text according to either\nthe tagName or a predefined buttonName that can override the tagName.\n\nThis method is defined in the io.js anonymous function but later attached to the `markus.io` object",
            "itemtype": "method",
            "name": "updateManualPopover",
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 119,
            "description": "This method generates all the necessary CSS classes for a new tagType. It will Also\noverwrite already existing definitions so you can use this to redefine the styling of existing\ntags too.\n\nThis method is defined in the io.js anonymous function but later attached to the `markus.io` object",
            "itemtype": "method",
            "name": "newTagCSS",
            "params": [
                {
                    "name": "tagName",
                    "description": "the name of the tagClass we want to generate in CSS",
                    "type": "String"
                },
                {
                    "name": "buttonName",
                    "description": "the name we want the button to have for this tagCSS",
                    "type": "String"
                },
                {
                    "name": "tagColor",
                    "description": "16 bit hex color (e.g. ``#FF0000` = red.) you can use css shortcuts like `red` or `#f00`",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 206,
            "description": "Called before defining new CSS rules for a tagType. This removes any pre-existing rules for\nthe provided tagType from the markus.tag and markus.tagCSS objects.\n\nThis method is defined in the io.js anonymous function but later attached to the `markus.io` object",
            "itemtype": "method",
            "name": "removeTagCSS",
            "params": [
                {
                    "name": "tagName",
                    "description": "The tag you want to remove",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 224,
            "description": "This function handles the loading of the CSS rules from the saved HTML document using\nthe tag and tagCSS attributes. It has a couple of failsafes in case the data is missing\nand also contains the defaults for the standard tagNames (i.e. placeName, officialTitle, timePeriod etc.)\n\nThis method is defined in the io.js anonymous function but later attached to the `markus.io` object",
            "itemtype": "method",
            "name": "loadCSSFromCSS_TagAtt",
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 378,
            "description": "Calling this method automates the download/export of the file. This generates\na click event on the `#export` button",
            "itemtype": "method",
            "name": "autoDownload",
            "params": [
                {
                    "name": "fileEntry",
                    "description": "The fileEntry object that contains the file",
                    "type": "Object"
                },
                {
                    "name": "suffix",
                    "description": "Filetype extension as String, or just a suffix",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 392,
            "description": "Calling this method will clean the data from the document into a newly spawned,\ntemporary element to use JQuery to clean it from unwanted elements and classes",
            "itemtype": "method",
            "name": "saveSave",
            "params": [
                {
                    "name": "filename",
                    "description": "the fileName for the new File",
                    "type": "String"
                },
                {
                    "name": "_fn",
                    "description": "The fileEntry object",
                    "type": "Object"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 428,
            "description": "Generates a TEI XML document from the HTML document that is generated in the browser.",
            "itemtype": "method",
            "name": "saveTEI",
            "params": [
                {
                    "name": "filename",
                    "description": "the fileName for the new File",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 449,
            "description": "Generates a standalone HTML document that you can view offline. This has all the data from the\ndocument stored in it, including the stylesheet CSS rules that have been parsed into one single\n`<style>` tag in the head of the HTML document.",
            "itemtype": "method",
            "name": "saveHTML",
            "params": [
                {
                    "name": "filename",
                    "description": "the name of the new file",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 507,
            "description": "Saves a file using the FileSystem. It requests write access and in return Gets\na fileEntry (basically a filePointer) that can be written to. Once we have that object\nwe write all the data that needs to be saved to there and call the callback function once the\nwriting of data is complete",
            "itemtype": "method",
            "name": "saveFile",
            "params": [
                {
                    "name": "filename",
                    "description": "the name of the file we want to create",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "the textdata of the file we want to create",
                    "type": "String"
                },
                {
                    "name": "_fn",
                    "description": "the callback function, called once the file has been written",
                    "type": "Function"
                },
                {
                    "name": "errorHandler",
                    "description": "A custom errorHandler, does not need to specified, can also be kept default",
                    "type": "Function"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 563,
            "description": "Removes the specified file from the fileSystem.",
            "itemtype": "method",
            "name": "removeFile",
            "params": [
                {
                    "name": "filename",
                    "description": "the name of the file we want to remove",
                    "type": "String"
                },
                {
                    "name": "_fn",
                    "description": "the callback function, called once the file has successfully been removed",
                    "type": "Function"
                },
                {
                    "name": "errorHandler",
                    "description": "the errorHandler, does not need to be defined, can fallback to default handler",
                    "type": "Function"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 605,
            "description": "Defines the readFile function. This allows you to read a file specified by the fileName\nand calls the callback on succes",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "_file",
                    "description": "the fileName as a String",
                    "type": "String"
                },
                {
                    "name": "_fn",
                    "description": "The callBack function",
                    "type": "Function"
                },
                {
                    "name": "errorHandler",
                    "description": "custom error handler",
                    "type": "Function"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 651,
            "description": "Exports a MARKUS save file and automatically saves it",
            "itemtype": "method",
            "name": "exportSave",
            "params": [
                {
                    "name": "filename",
                    "description": "the fileName of the file you download",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 675,
            "description": "Exports a TEI save file of the document and automatically saves it",
            "itemtype": "method",
            "name": "exportTEI",
            "params": [
                {
                    "name": "filename",
                    "description": "the fileName of the file you download",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 695,
            "description": "Exports a HTML save of the document and its layout and automatically saves it",
            "itemtype": "method",
            "name": "exportHTML",
            "params": [
                {
                    "name": "filename",
                    "description": "the fileName of the file you download",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 715,
            "description": "A simple basic save to the normal MARKUS format. Cleans the data, processes it\nfor download and then automatically downloads it.",
            "params": [
                {
                    "name": "filename",
                    "description": "The filename of the new file we want to create",
                    "type": "String"
                },
                {
                    "name": "_fn",
                    "description": "The callback function called uppon completion",
                    "type": "Function"
                }
            ],
            "class": "IO",
            "module": "io.js"
        },
        {
            "file": "src\\js\\io.js",
            "line": 749,
            "description": "Global method that registers the Global Tag Management UI, it also takes care of all its\nevent handlers etc.",
            "itemtype": "method",
            "name": "registeTagManageUI",
            "class": "Global",
            "module": "io.js"
        },
        {
            "file": "src\\js\\markus.js",
            "line": 10,
            "description": "This is the global object that holds the version and build info",
            "itemtype": "property",
            "name": "markus",
            "type": "Object",
            "class": "Global",
            "module": "markus.js"
        },
        {
            "file": "src\\js\\markus.js",
            "line": 25,
            "description": "New JQuery function definition. Scrolls to the element that is passed\nas a parameter.\nExample Usage:\n  `$('#div_element2').goTo();`\n*Source:*\nhttps://stackoverflow.com/questions/4801655/how-to-go-to-a-specific-element-on-page",
            "itemtype": "method",
            "name": "goto",
            "params": [
                {
                    "name": "element",
                    "description": "the element we want to scroll to",
                    "type": "Object"
                }
            ],
            "class": "JQuery",
            "module": "markus.js"
        },
        {
            "file": "src\\js\\markus.js",
            "line": 45,
            "description": "New JQuery function definition. Replaces all elements passed to this functions\nwith the specified element name.\n\nExample Usage:\n``$('div').replaceTagName('span');`\n\n*Source:*\nhttps://stackoverflow.com/questions/2815683/jquery-javascript-replace-tag-type",
            "itemtype": "method",
            "name": "replaceTagName",
            "params": [
                {
                    "name": "replaceWith",
                    "description": "the string you want to replace the element name with",
                    "type": "String"
                }
            ],
            "class": "JQuery",
            "module": "markus.js"
        },
        {
            "file": "src\\js\\navbar.js",
            "line": 19,
            "description": "Defines the loadNavBar function that will later be register to the `markus.navbar.register`\nfunctions.\n\nThis function defines all the behaviour of the navBar and the registers all the listeners to\nthe NavBar UI objects.\n\nPlease read through the source to understand what the actual navBar buttons do.",
            "itemtype": "method",
            "name": "loadNavBar",
            "class": "navbar.js_anonymous",
            "module": "navbar.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 15,
            "description": "Function called before search. It hides the iframe of\nthe dictionary and shows the spinHolder.",
            "itemtype": "method",
            "name": "_jobBeforeSearch",
            "params": [
                {
                    "name": "dictionary",
                    "description": "The dictionary Object",
                    "type": "Object"
                }
            ],
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 27,
            "description": "Searches the dictionary for itself.",
            "itemtype": "method",
            "name": "searchDictionary",
            "params": [
                {
                    "name": "dictionary",
                    "description": "the passed dictionary parameter",
                    "type": "Object"
                }
            ],
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 37,
            "description": "All dictionaries are held in this one object",
            "itemtype": "property",
            "name": "dictionaries",
            "type": "{Object}",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 45,
            "itemtype": "property",
            "name": "webDict",
            "type": "{WebDictionary}",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 51,
            "description": "Define a search function. Uses the webDict object to open the URL\nspecified in the dictionary object.",
            "itemtype": "method",
            "name": "_search",
            "params": [
                {
                    "name": "dictionary",
                    "description": "the dictionary object",
                    "type": "Object"
                }
            ],
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 67,
            "description": "Resizes the passed object to match the window height.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "obj",
                    "description": "HTML object that has to match the window height",
                    "type": "Object"
                }
            ],
            "class": "WebDictionary",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 77,
            "description": "Sets all the parameters in a dictionary object to open the passed URL.",
            "itemtype": "method",
            "name": "openURL",
            "params": [
                {
                    "name": "dictionary",
                    "description": "the passed dictionary object",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "the URL string",
                    "type": "String"
                }
            ],
            "class": "WebDictionary",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 101,
            "description": "Searches through all dictionaries by looping through the object that\nholds all defined dictionaries by key.",
            "itemtype": "method",
            "name": "searchAllDictionary",
            "class": "WebDictionary",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 114,
            "description": "Returns the specified webDictionary referenced by its name",
            "itemtype": "method",
            "name": "getDictionary",
            "params": [
                {
                    "name": "web_dictionary_name",
                    "description": "the name of the webDictionary you want to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the referenced webDictionary object",
                "type": "Object"
            },
            "class": "WebDictionary",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 125,
            "description": "Registers a new Web Dictionary",
            "itemtype": "method",
            "name": "registWebDictionary",
            "class": "WebDictionary",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 215,
            "description": "Debounces the specified function call.",
            "itemtype": "method",
            "name": "debouncer",
            "params": [
                {
                    "name": "func",
                    "description": "the function you called and want to be debounced",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "the timeout of the debounce",
                    "type": "Int"
                }
            ],
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 236,
            "description": "Defines what happens when you click on a tab. It shows the specified\ntab, hides all webDicts, shows the correct one and triggers the\nresetSize event.",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 258,
            "description": "ResetSize handler for the iframe of the Web Dictionary",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 266,
            "description": "ResetSize handler for the container of the Web Dictionary",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 273,
            "description": "Affix handler for the container of the Web Dictionary",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        },
        {
            "file": "src\\js\\webDictionary.js",
            "line": 280,
            "description": "Load handler for the iframe of the Web Dictionary. Handles initializing",
            "class": "webDictionary.js_anonymous",
            "module": "webDictionary.js"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nA simple basic save to the normal MARKUS format. Cleans the data, processes it\nfor download and then automatically downloads it.",
            "line": " src\\js\\io.js:715"
        },
        {
            "message": "Missing item type\nDefines what happens when you click on a tab. It shows the specified\ntab, hides all webDicts, shows the correct one and triggers the\nresetSize event.",
            "line": " src\\js\\webDictionary.js:236"
        },
        {
            "message": "Missing item type\nResetSize handler for the iframe of the Web Dictionary",
            "line": " src\\js\\webDictionary.js:258"
        },
        {
            "message": "Missing item type\nResetSize handler for the container of the Web Dictionary",
            "line": " src\\js\\webDictionary.js:266"
        },
        {
            "message": "Missing item type\nAffix handler for the container of the Web Dictionary",
            "line": " src\\js\\webDictionary.js:273"
        },
        {
            "message": "Missing item type\nLoad handler for the iframe of the Web Dictionary. Handles initializing",
            "line": " src\\js\\webDictionary.js:280"
        }
    ]
}